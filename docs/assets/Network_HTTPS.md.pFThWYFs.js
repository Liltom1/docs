import{_ as a,o as i,c as e,a5 as n}from"./chunks/framework.W6qmpZhh.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{"next":{"text":"JWT","link":"../Network/JWT"},"prev":{"text":"navigator.sendBeacon","link":"../Network/navigator.sendBeacon"}},"headers":[],"relativePath":"Network/HTTPS.md","filePath":"Network/HTTPS.md","lastUpdated":1734791121000}'),t={name:"Network/HTTPS.md"};function p(l,s,h,r,k,o){return i(),e("div",null,s[0]||(s[0]=[n(`<h4 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h4><h5 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h5><p>是一种通过加密通道传输数据的安全协议。它是 HTTP 协议的安全版本，用于在 Web 浏览器和 Web 服务器之间进行安全的数据传输。HTTPS 在传输过程中使用了 SSL（Secure Sockets Layer）或 TLS（Transport Layer Security）协议来加密数据，确保敏感信息在传输过程中不会被窃取或篡改。</p><p>http缺点</p><ul><li><p><strong>通信使用明文(不加密)，内容可能会被盗用</strong></p></li><li><p><strong>不验证通信方的身份，因此有可能遭遇伪装</strong></p></li><li><p><strong>无法证明报文的完整性，所以有可能已遭篡改</strong></p></li></ul><p>https</p><ul><li>信息加密</li><li>完整性校验</li><li>身份验证</li></ul><p>HTTPS = http + TLS/SSL</p><h5 id="tls-ssl" tabindex="-1">TLS SSL <a class="header-anchor" href="#tls-ssl" aria-label="Permalink to &quot;TLS SSL&quot;">​</a></h5><p>TLS（Transport Layer Security）和 SSL（Secure Sockets Layer）是用于保护网络通信的安全协议。它们都提供了加密和认证机制，用于确保数据传输的机密性和完整性。</p><p>面试题</p><p>TLS和SSL是在那一层进行加密的？</p><p>传输层上面，应用层的下面，简称加密层</p><h5 id="常见的加密算法" tabindex="-1">常见的加密算法 <a class="header-anchor" href="#常见的加密算法" aria-label="Permalink to &quot;常见的加密算法&quot;">​</a></h5><p>1.AES DES（对称加密）</p><p>两端协商好怎么加密，解密</p><p>A段 ：AES加密+密钥（123123） + 明文（456456） = 789789</p><p>B段：AES + 密钥（123123） + 密文（789789） = 456456</p><p>2.RSA DSA(非对称加密)</p><p>公钥 所有人都知道 私钥只有管理员才知道</p><p>A段：RSA + 公钥 + 明文 （123123） = 密文（ 456456）</p><p>B段：RSA + 私钥 + 密文 （456456） = 123123</p><p>TLS是将三种加密方式融合起来，对称加密 非对称加密 散列函数，提高安全性</p><h5 id="openssl-生成私钥" tabindex="-1">openSSL 生成私钥 <a class="header-anchor" href="#openssl-生成私钥" aria-label="Permalink to &quot;openSSL 生成私钥&quot;">​</a></h5><p>在 SSL/TLS 加密通信中，一般需要使用三个文件来完成证书相关操作</p><h6 id="_1-生成私钥文件-例如-private-key-pem-用于对加密数据进行解密操作" tabindex="-1">1.生成私钥文件（例如 &quot;private-key.pem&quot;），用于对加密数据进行解密操作 <a class="header-anchor" href="#_1-生成私钥文件-例如-private-key-pem-用于对加密数据进行解密操作" aria-label="Permalink to &quot;1.生成私钥文件（例如 &quot;private-key.pem&quot;），用于对加密数据进行解密操作&quot;">​</a></h6><p>命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>openssl genpkey -algorithm RSA -out private-key.pem -aes256</span></span></code></pre></div><ul><li>openssl: OpenSSL 命令行工具的名称。</li><li>genpkey: 生成私钥的命令。</li><li>-algorithm RSA: 指定生成 RSA 私钥。</li><li>-out private-key.pem: 将生成的私钥保存为 private-key.pem 文件。</li><li>-aes256: 为私钥添加 AES 256 位加密，以保护私钥文件不被未经授权的人访问。</li></ul><p>Enter PEM pass phrase qwe123 密码短语生成pem文件的时候需要</p><h6 id="_2-证书签名请求文件-例如-certificate-csr-用于向-ca-申请-ssl-tls-证书签名" tabindex="-1">2.证书签名请求文件（例如 &quot;certificate.csr&quot;），用于向 CA 申请 SSL/TLS 证书签名 <a class="header-anchor" href="#_2-证书签名请求文件-例如-certificate-csr-用于向-ca-申请-ssl-tls-证书签名" aria-label="Permalink to &quot;2.证书签名请求文件（例如 &quot;certificate.csr&quot;），用于向 CA 申请 SSL/TLS 证书签名&quot;">​</a></h6><p>命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>openssl req -new -key private-key.pem -out certificate.csr</span></span></code></pre></div><ul><li>req: 表示使用 X.509 证书请求管理器 (Certificate Request Management) 功能模块。</li><li>-new: 表示生成新的证书签名请求</li><li>-key private-key.pem: 表示使用指定的私钥文件 &quot;private-key.pem&quot; 来加密证书签名请求中的密钥对</li><li>-out certificate.csr: 表示输出生成的证书签名请求到文件 &quot;certificate.csr&quot; 中。该文件中包含了申请者提供的一些证书请求信息，例如公钥、授权主体的身份信息等。</li></ul><p>每步操作需要填写的信息</p><p>Country Name (2 letter code) []:CN 国家</p><p>State or Province Name (full name) []:BJ 省份</p><p>Locality Name (eg, city) []:BJ 城市</p><p>Organization Name (eg, company)ZMY 组织或者是个人</p><p>Organizational Unit Name (eg, section) []:XMKJ 机构名称</p><p>Common Name (eg, fully qualified host name) []:localhost 域名</p><p>Email Address []: 邮箱地址</p><p>Please enter the following &#39;extra&#39; attributes</p><p>to be sent with your certificate request</p><p>A challenge password []: 密码加盐 XMZSXMZSXMZS</p><h6 id="_3-ssl-tls-证书文件-例如-certificate-pem-用于对客户端发送的请求进行验证-以确保通信安全可靠" tabindex="-1">3.SSL/TLS 证书文件（例如 &quot;certificate.pem&quot;），用于对客户端发送的请求进行验证，以确保通信安全可靠 <a class="header-anchor" href="#_3-ssl-tls-证书文件-例如-certificate-pem-用于对客户端发送的请求进行验证-以确保通信安全可靠" aria-label="Permalink to &quot;3.SSL/TLS 证书文件（例如 &quot;certificate.pem&quot;），用于对客户端发送的请求进行验证，以确保通信安全可靠&quot;">​</a></h6><p>命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>openssl x509 -req -in certificate.csr -signkey private-key.pem -out certificate.pem</span></span></code></pre></div><ul><li>x509: 表示使用 X.509 <strong>证书管理器功能模块</strong></li><li>-req: 表示从输入文件（这里为 &quot;certificate.csr&quot;）中读取证书签名请求数据。</li><li>-in certificate.csr: 指定要读取的证书签名请求文件名。</li><li>-signkey private-key.pem: 指定使用指定的私钥文件 &quot;private-key.pem&quot; 来进行签名操作。一般情况下，签名证书的私钥应该是和之前生成 CSR 的私钥对应的。</li><li>-out certificate.pem: 表示将签名后的证书输出到文件 &quot;certificate.pem&quot; 中。该文件中包含了签名后的证书信息，包括签名算法、有效期、公钥、授权主体的身份信息等</li></ul><p>Enter pass phrase for private-key.pem: 密码短语</p><p>后端</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:https&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:fs&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    key: fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;private-key.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cert: fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;certificate.pem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //密码短语</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    passphrase: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;qwe123&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeHead</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;server is running&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h5 id="nginx配置https" tabindex="-1">nginx配置https <a class="header-anchor" href="#nginx配置https" aria-label="Permalink to &quot;nginx配置https&quot;">​</a></h5><p><strong>如果在windows使用nginx配置https 私钥不能设置密码</strong></p><p>openssl genrsa -out nginx.key 2048 （生成私钥）</p><p>openssl req -new -key nginx.key -out nginx.csr（生成签名文件）</p><p>openssl x509 -req -in nginx.csr -signkey nginx.key -out nginx.crt（生成证书）</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    server {</span></span>
<span class="line"><span>       listen       443 ssl;</span></span>
<span class="line"><span>       server_name  localhost;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>       ssl_certificate      nginx.crt;</span></span>
<span class="line"><span>       ssl_certificate_key  nginx.key;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>       ssl_session_cache    shared:SSL:1m;</span></span>
<span class="line"><span>       ssl_session_timeout  5m;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span>
<span class="line"><span>    #    ssl_prefer_server_ciphers  on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>       location / {</span></span>
<span class="line"><span>           root   html;</span></span>
<span class="line"><span>           index  index.html index.htm;</span></span>
<span class="line"><span>       }</span></span>
<span class="line"><span>    }</span></span></code></pre></div>`,58)]))}const E=a(t,[["render",p]]);export{d as __pageData,E as default};
